{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/pages/About.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/pages/Notfound.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","color","float","bind","to","marginRight","Contacts","Fragment","key","Header","branding","fontSize","paddingRight","defaultProps","TextInputGroup","lable","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","Notfound","EditContact","updateContact","match","params","put","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b5e1d29b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id\n            ? (contact = action.payload)\n            : contact\n        ),\n      };\n    default:\n      return state;\n  }\n};\nexport class Provider extends Component {\n  state = {\n    contacts: [],\n    dispatch: (action) => this.setState((state) => reducer(state, action)),\n  };\n  async componentDidMount() {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    this.setState({ contacts: res.data });\n  }\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\nexport const Consumer = Context.Consumer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false,\n  };\n  onDeleteClick = async (id, dispatch) => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    } catch (e) {\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    }\n  };\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{' '}\n                <i\n                  onClick={() =>\n                    this.setState({\n                      showContactInfo: !showContactInfo,\n                    })\n                  }\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <i\n                  className=\"fas fa-trash\"\n                  style={{ cursor: 'pointer', color: 'red', float: 'right' }}\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                />\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className=\"fas fa-edit\"\n                    style={{\n                      cursor: 'pointer',\n                      color: 'black',\n                      float: 'right',\n                      marginRight: '10px',\n                    }}\n                  />\n                </Link>\n              </h4>\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Email: {email}</li>\n                  <li className=\"list-group-item\">Phone: {phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\nexport default Contact;\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {(value) => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4\">\n                <span className=\"text-info\">Contact </span>List\n              </h1>\n              {contacts.map((contact) => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\nexport default Contacts;\n","import React from 'react';\n\nexport default function () {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple app to manage your contacts.</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nconst Header = (props) => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-3 py-0\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand\">\n          <i\n            className=\"fas fa-address-card\"\n            style={{\n              fontSize: '25px',\n              paddingRight: '15px',\n              color: '#17a2b8',\n            }}\n          />\n          {branding}\n        </Link>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"navbar-item\">\n              <Link className=\"nav-link\" to=\"/\">\n                <i className=\"fas fa-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link className=\"nav-link\" to=\"/contact/add\">\n                <i className=\"fas fa-plus-circle\" /> Add\n              </Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                <i className=\"fas fa-info-circle\" /> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\nHeader.defaultProps = {\n  branding: 'My App',\n};\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired,\n};\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  name,\n  lable,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{lable}</label>\n      <input\n        type={type}\n        name={name}\n        id={name}\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error,\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\nTextInputGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  lable: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\nTextInputGroup.defaultProps = {\n  type: 'text',\n};\nexport default TextInputGroup;\n/*\nwe could make it like :\nconst TextInoutGroup = (props){\n    return (\n    <div className=\"form-group\">\n      <label htmlFor={props.name}>{props.lable}</label>\n      <input\n        type={props.type}\n        name={props.name}\n        id={props.name}\n        className=\"form-control form-control-lg\"\n        placeholder={props.placeholder}\n        value={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n}\n*/\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\nimport TexetInputGroup from '../layout/TextInputGroup';\n\nclass AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n    const { name, email, phone } = this.state;\n\n    //check for errors\n    if (name === '') {\n      this.setState({\n        errors: {\n          name: 'Name is rquired',\n        },\n      });\n      return;\n    }\n    if (email === '') {\n      this.setState({\n        errors: {\n          email: 'Email is rquired',\n        },\n      });\n      return;\n    }\n    if (phone === '') {\n      this.setState({\n        errors: {\n          phone: 'Phone is rquired',\n        },\n      });\n      return;\n    }\n    const newContact = {\n      name,\n      email,\n      phone,\n    };\n    // make post request to the server\n    const res = await axios.post(\n      'https://jsonplaceholder.typicode.com/users',\n      newContact\n    );\n    dispatch({ type: 'ADD_CONTACT', payload: res.data });\n    //clear the fields after submitting\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n    //redirect to the home bage after submiting\n    this.props.history.push('/');\n  };\n  onChange = (e) =>\n    this.setState({\n      [e.target.name]: e.target.value,\n      [e.target.email]: e.target.value,\n      [e.target.phone]: e.target.value,\n    });\n  render() {\n    const { name, email, phone, errors } = this.state;\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header bg-info text-white \">Add Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TexetInputGroup\n                    lable=\"Name\"\n                    name=\"name\"\n                    id=\"name\"\n                    placeholder=\"Enter Name...\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TexetInputGroup\n                    lable=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    id=\"email\"\n                    placeholder=\"Enter Email...\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TexetInputGroup\n                    lable=\"Phone\"\n                    name=\"phone\"\n                    id=\"phone\"\n                    placeholder=\"Enter Phone...\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-outline-primary btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\nexport default AddContact;\n","import React from 'react';\n\nexport default function Notfound() {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> page not found\n      </h1>\n      <p className=\"lead\">Sorry, that page does not exist</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\nimport TexetInputGroup from '../layout/TextInputGroup';\n\nclass EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n  async componentDidMount() {\n    const { id } = this.props.match.params; //get the id from the url so we get the single contact\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    const contact = res.data;\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone,\n    });\n  }\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n    const { name, email, phone } = this.state;\n\n    //check for errors\n    if (name === '') {\n      this.setState({\n        errors: {\n          name: 'Name is rquired',\n        },\n      });\n      return;\n    }\n    if (email === '') {\n      this.setState({\n        errors: {\n          email: 'Email is rquired',\n        },\n      });\n      return;\n    }\n    if (phone === '') {\n      this.setState({\n        errors: {\n          phone: 'Phone is rquired',\n        },\n      });\n      return;\n    }\n    //update contact using put method\n    const updateContact = {\n      name,\n      email,\n      phone,\n    };\n    const { id } = this.props.match.params;\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updateContact\n    );\n    dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\n    //clear the fields after submitting\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n    //redirect to the home bage after submiting\n    this.props.history.push('/');\n  };\n  onChange = (e) =>\n    this.setState({\n      [e.target.name]: e.target.value,\n      [e.target.email]: e.target.value,\n      [e.target.phone]: e.target.value,\n    });\n  render() {\n    const { name, email, phone, errors } = this.state;\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header bg-info text-white \">\n                Edit Contact\n              </div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TexetInputGroup\n                    lable=\"Name\"\n                    name=\"name\"\n                    id=\"name\"\n                    placeholder=\"Enter Name...\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TexetInputGroup\n                    lable=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    id=\"email\"\n                    placeholder=\"Enter Email...\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TexetInputGroup\n                    lable=\"Phone\"\n                    name=\"phone\"\n                    id=\"phone\"\n                    placeholder=\"Enter Phone...\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-outline-primary btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\nexport default EditContact;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Contacts from './components/contacts/Contacts';\nimport About from './components/pages/About';\nimport Header from './components/layout/Header';\nimport { Provider } from './context';\nimport AddContact from './components/contacts/AddContact';\nimport Notfound from './components/pages/Notfound';\nimport EditContact from './components/contacts/EditContact';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div>\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route component={Notfound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}